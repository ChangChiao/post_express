#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("post-express:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Create Socket.io
 */
const { Server } = require("socket.io");
const io = new Server(server, {
  path: "/socket.io/",
  cors: {
    origin: "*",
  }
});
// exports.io = io;

// io.on("connection", (socket) => {
//   console.log("socket!!!!");
//   io.emit("join", "hi!!");
//   //   socket.on("chat message", (msg) => {
//   //     io.emit("chat message", msg);
//   //   });
// });
/**
 * Create Socket.io
 */
const { Server } = require("socket.io");
const io = new Server(server, {
  path: "/socket.io/",
  cors: {
    origin: "*",
  }
});
// exports.io = io;

// io.on("connection", (socket) => {
//   console.log("socket!!!!");
//   io.emit("join", "hi!!");
//   //   socket.on("chat message", (msg) => {
//   //     io.emit("chat message", msg);
//   //   });
// });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

//建立連接
io.on('connection', (socket) => {
  console.log('socket connect', socket.id);
  // const qtd = socket.client.conn.server.clientsCount;
  // socket.join('KPL') //加入房間
  // 監聽 client發來的訊息
  socket.on("sendMsg", (msg) => {
    // socket.to('KPL').emit('talk', msg)
    socket.emit('receiveMsg', msg)
    console.log(`傳來的訊息`, msg);
  });
  //斷開連接
  socket.on('disconnect', () => {})

io.on('connection', (socket) => {
  console.log('socket connect');
  // console.log('socket====', socket);    
  io.emit("receive server", "hi!!");
  // const qtd = socket.client.conn.server.clientsCount;
  // io.emit('novaconexao', qtd);
  io.on("no no no", (msg) => {
    console.log(`no no no`, msg);
  });
});


io.on("connect_error", (err) => {
  console.log(`connect_error due to ${err.message}`);
});
app.set('socketio', io);//here you export my socket.io to a global    


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
